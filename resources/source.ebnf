(* Â© 2013, 2014 Ian Eure *)
(* Author: Ian Eure <ian.eure@gmail.com> *)
(* Created from descriptions in "Fluke 9010A Language Compiler," p/n 661504 *)

S = (<EOL> | INCLUDE | SETUP | ADDRESS_SPACE | DECLARATIONS)*
     PROGRAM+ (<EOL>+ (INCLUDE <EOL>*)*)?



<BOL> = SEP

<SEP> = #"[ \t]+"

<COMMENT> = "!" #".*"
<ALT_COMMENT> = ":" #".*"
<EOL> = SEP? COMMENT? "\n"

<DASH> = ((SEP? "-" SEP?)? | " "+)
<AT> = ((SEP? "@" SEP?)? | " "+)
<EQ> = <SEP?> "=" <SEP?>

DEC = #"[0-9]+"
HEX = #"[0-9A-F]+"

YN = "YES" | "NO"

REGISTER = <"REG" SEP?> #"[0-9A-F]"

(* Unary operators *)
TERM_UNOP = ("CPL" | "DEC" | "INC" | "SHR" | "SHL") (<SEP> DEC)?

TERM = (SYMBOL | DEC | HEX | REGISTER) (<SEP> TERM_UNOP)*
AND = <"AND">
OR = <"OR">
EXPR = TERM (<SEP> (AND | OR) <SEP> EXPR)?

SYMBOL = #"[A-Za-z][A-Za-z0-9_]+"
SYMBOLS = SYMBOL <SEP? "," SEP?> (SYMBOL | SYMBOLS)

STRING = #"[A-Z0-9;@=<>'\.\?#\+\-,%\*\\/\"\$_ ]*"

ADDR = EXPR
(* Start address, optional end *)
ADDRESS_BLOCK = ADDR (<DASH> ADDR)

INCLUDE = <'INCLUDE' SEP '"'> #'[^"]+' <'"'>



(* Setting up *)

SETUP = <BOL? "SETUP" (" INFORMATION")? EOL>
        (<BOL>? (SETUP_BEEP | SETUP_BUS_TEST | SETUP_ENABLE |
         SETUP_EXERCISE_ERRORS | SETUP_LINESIZE | SETUP_NEWLINE |
         SETUP_POD | SETUP_RUN_UUT | SETUP_STALL |
         SETUP_UNSTALL | SETUP_TIMEOUT | SETUP_TRAP | <EOL>) <EOL>?)+

SETUP_BEEP = "BEEP ON ERR TRANSITION" DASH YN
SETUP_BUS_TEST = <"BUS" (" TEST")? AT> HEX
FORCING_LINE = "WAIT" | "RDY" | "TSC" | "DBE" | "HALT" | "BR/ACK" |
               "INTR" | "MR" | "DMA" | "UNUSED" | "READY" | "BUSRQ" | "HOLD" |
               "RQGT0" | "RQGT1"
SETUP_ENABLE = <"ENABLE" SEP> FORCING_LINE DASH YN
SETUP_EXERCISE_ERRORS = <"EXERCISE ERRORS" DASH> YN
SETUP_LINESIZE = <"LINESIZE" " "+> DEC
SETUP_NEWLINE = <"NEWLINE" " "+> HEX
SETUP_POD = <"POD" DASH> ("1802" | "6502" | "6800" | "68000" | "6802" |
                          "6809" | "6809E" | "8041" | "'35/48" | "'39/49" |
                          "'40/50" | "8080" | "8085" | "8086" | "8086MX" |
                          "8088" | "8088MX" | "9900" | "Z80")
SETUP_RUN_UUT = <"RUN UUT" AT> HEX
SETUP_STALL = <"STALL" " "+> HEX
SETUP_UNSTALL = <"UNSTALL" " "+> HEX
SETUP_TIMEOUT = <"TIMEOUT" DASH> DEC

<SETUP_BAD_POWER_SUPPLY> = <"BAD POWER SUPPLY">
<SETUP_ILLEGAL_ADDRESS> = <"ILLEGAL ADDRESS">
<SETUP_ACTIVE_INTERRUPT> = <"ACTIVE INTERRUPT">
<SETUP_ACTIVE_FORCE_LINE> = <"ACTIVE FORCE LINE">
<SETUP_CONTROL_ERROR> = <"CONTROL ERROR">
<SETUP_ADDRESS_ERROR> = <"ADDRESS ERROR">
<SETUP_DATA_ERROR> = <"DATA ERROR">

SETUP_TRAP = <"TRAP" " "+>
             (SETUP_BAD_POWER_SUPPLY | SETUP_ILLEGAL_ADDRESS |
              SETUP_ACTIVE_INTERRUPT | SETUP_ACTIVE_FORCE_LINE |
              SETUP_CONTROL_ERROR | SETUP_ADDRESS_ERROR | SETUP_DATA_ERROR)
             <DASH> YN



(* Address Space *)

ADDRESS_SPACE = <"ADDRESS SPACE" (" INFORMATION")? EOL>
                ((RAM | ROM | IO | <EOL>)+ <EOL>?)

RAM = <"RAM" AT> ADDRESS_BLOCK
ROM = <"ROM" AT> ADDRESS_BLOCK <SEP> "SIG" <SEP> EXPR
IO = <"IO" AT> ADDRESS_BLOCK <SEP> "BITS" <SEP> EXPR



(* Declarations *)
DECLARATIONS = <"DECLARATIONS" EOL> (DECL_ASSIGN)+ EOL?
DECL_ASSIGN = <SEP>? <"ASSIGN"> <SEP> REGISTER <SEP> <"TO"> <SEP> (SYMBOL | SYMBOLS) <EOL>



(* Programs *)

PROGRAM = BOL? PROGRAM_HEAD <EOL>+ DECLARATIONS? PROGRAM_BODY
PROGRAM_HEAD = <"PROGRAM" SEP> (DEC | SYMBOL) (<SEP> DEC <SEP> "BYTES")? <SEP? ALT_COMMENT?>
PROGRAM_BODY = ((<BOL>? STATEMENT <EOL>) | <EOL>)+
STATEMENT = (ATOG | AUTO_TEST | AUX | BUS_TEST | DISPLAY | DTOG |
             EXECUTE | GOTO | IF | IO_TEST | LABEL | (LABEL
             <SEP> STATEMENT) | LEARN | RAM_TEST | RAMP | READ |
             READ_PROBE | REG_ASSIGN | ROM_TEST | RUN_UUT | STOP |
             SYNC | UNARY | WALK | WRITE) <(SEP REPT_LOOP)?>

(* Identical to DISPLAY *)
AUX = <"AUX" (" " | "-" | "\t")> STRING
ATOG = <"ATOG" AT> EXPR <SEP> "BIT" <SEP> EXPR
AUTO_TEST = "AUTO" (" TEST")?
BUS_TEST = "BUS" (" TEST")?
CTL = <"CTL">
DISPLAY = <"DPY" (" " | "-" | "\t")> STRING
DTOG = <"DTOG" AT> (((ADDR | WILD) <EQ> (EXPR | WILD)) |
                     CTL <EQ> (EXPR | WILD)) <SEP> "BIT" <SEP> (EXPR | WILD)
(* FIXME - These should be decimal, but default to hex *)
EXECUTE = <("EXECUTE" | "EX") (SEP "PROGRAM")? SEP> EXPR
GOTO = <"GOTO" SEP> (HEX | SYMBOL)
IF = <"IF" SEP> EXPR <SEP?> (">" | "=" | ">=") <SEP?> EXPR <SEP> GOTO
IO_TEST = <"IO" (SEP "TEST")?> (<AT> ADDRESS_BLOCK <SEP> "BTS" <SEP> (EXPR | WILD))?
LABEL = (HEX | SYMBOL) <":"> <(SEP? "LABEL" SEP (HEX | SYMBOL))>?
LEARN = <"LEARN"> (<AT> ADDRESS_BLOCK)?
READ_PROBE = <("READ" | "RD") SEP "PROBE">
RAM_TEST = <"RAM"> (<SEP> ("SHORT" | "LONG"))? (<AT> ADDRESS_BLOCK)?
RAMP = <"RAMP" AT> (ADDR | WILD)
READ = <("READ" | "RD") AT> (ADDR | STS | WILD)
(* READ_STS = <("READ" | "RD") AT> <"STS"> *)
REG_ASSIGN = (SYMBOL | REGISTER) <EQ> EXPR
(* FIXME - add to auto test, bus test, ram test, rom test, io test,
           read, write, ramp, walk, atog, dtog *)
REPT_LOOP = ("REPT" SEP?)* "LOOP"?
ROM_TEST = <"ROM" (SEP "TEST")?> (<AT> ADDRESS_BLOCK <SEP> "SIG" <SEP> (EXPR | WILD))?
RUN_UUT = <"RUN UUT"> (<AT> EXPR)?
STOP = "STOP"
STS = <"STS">
SYNC = <"SYNC" SEP> (HEX | "ADDRESS" | "DATA"| "FREE-RUN")
UNARY = ("CPL" | "DEC" | "INC" | "SHL" | "SHR") <SEP> (SYMBOL | REGISTER)
WALK = <"WALK" AT> (ADDR | WILD) EQ (EXPR | WILD)
WILD = <"*">
WRITE = <("WRITE" | "WR") AT> (((ADDR | WILD) EQ (EXPR | WILD)) |
                               (CTL EQ (EXPR | WILD)))
